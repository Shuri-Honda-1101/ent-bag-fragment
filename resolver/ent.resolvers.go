package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"fmt"

	"github.com/Shuri-Honda-1101/ent-bug-fragment/ent"
	"github.com/Shuri-Honda-1101/ent-bug-fragment/gql"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	node, err := r.client.Noder(ctx, id)

	if err != nil {
		return nil, err
	}
	return node, nil
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	nodes, err := r.client.Noders(ctx, ids)

	if err != nil {
		return nil, err
	}
	return nodes, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*ent.Project, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*ent.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Query returns gql.QueryResolver implementation.
func (r *Resolver) Query() gql.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
